import "./chunk-624QZG55.js";

// node_modules/date-fns/esm/_lib/requiredArgs/index.js
function requiredArgs(required, args) {
  if (args.length < required) {
    throw new TypeError(required + " argument" + (required > 1 ? "s" : "") + " required, but only " + args.length + " present");
  }
}

// node_modules/date-fns/esm/constants/index.js
var daysInWeek = 7;
var daysInYear = 365.2425;
var maxTime = Math.pow(10, 8) * 24 * 60 * 60 * 1e3;
var minTime = -maxTime;
var secondsInHour = 3600;
var secondsInDay = secondsInHour * 24;
var secondsInWeek = secondsInDay * 7;
var secondsInYear = secondsInDay * daysInYear;
var secondsInMonth = secondsInYear / 12;
var secondsInQuarter = secondsInMonth * 3;

// node_modules/date-fns/esm/daysToWeeks/index.js
function daysToWeeks(days) {
  requiredArgs(1, arguments);
  var weeks = days / daysInWeek;
  return Math.floor(weeks);
}

// node_modules/date-fns/esm/fp/_lib/convertToFP/index.js
function convertToFP(fn, arity) {
  var a = arguments.length > 2 && arguments[2] !== void 0 ? arguments[2] : [];
  if (a.length >= arity) {
    return fn.apply(null, a.slice(0, arity).reverse());
  }
  return function() {
    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }
    return convertToFP(fn, arity, a.concat(args));
  };
}

// node_modules/date-fns/esm/fp/daysToWeeks/index.js
var daysToWeeks_default = convertToFP(daysToWeeks, 1);
export {
  daysToWeeks_default as default
};
//# sourceMappingURL=date-fns_fp_daysToWeeks.js.map
